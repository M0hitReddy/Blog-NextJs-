generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  name      String?
  image     String
  password  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  posts     Post[]
  comments  Comment[]
  likes     Like[]
  bookmarks Bookmark[]
  following Follower[] @relation("Following")
  followers Follower[] @relation("Followers")
}

model Post {
  id           String           @id @default(cuid())
  title        String
  previewTitle String?
  subtitle     String?
  previewImage String?
  content      String?          @db.Text
  published    Boolean          @default(false)
  status       String           @default("draft")
  author       User             @relation(fields: [authorId], references: [id])
  authorId     String
  publishedAt  DateTime?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  comments     Comment[]
  bookmarks    Bookmark[]
  likes        Like[]
  categories   Category[]
  topics       Topic[]
  // categories CategoryToPost[]
  // Section    Section[] @relation("PostSections")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        String   @id @default(cuid())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
}

model Bookmark {
  id        String   @id @default(cuid())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}

model Category {
  id    String           @id @default(cuid())
  name  String           @unique
  posts Post[]
  // posts CategoryToPost[]
}

model Topic {
  id    String           @id @default(cuid())
  name  String           @unique
  posts Post[]
}



model Follower {
  id          String   @id @default(cuid())
  following   User     @relation("Following", fields: [followingId], references: [id])
  followingId String
  follower    User     @relation("Followers", fields: [followerId], references: [id])
  followerId  String
  createdAt   DateTime @default(now())
}

// model Section {
//   id     String @id @default(cuid())
//   tags String
//   postId String
//   post   Post   @relation("PostSections", fields: [postId], references: [id])
// }

// model Tag {
//   id         String      @id @default(cuid())
//   name       String
//   posts      Post[]
// }

// model CategoryToPost {
//   postId     String
//   categoryId String
//   post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
//   category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

//   // Define composite primary key
//   @@id([postId, categoryId])
// }

